# meh
set(CMAKE_VERBOSE_MAKEFILE ON)


# Ensure minimum CMake version
cmake_minimum_required(VERSION 3.11)

# Set the directory for executable files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set directories for library files
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Set output folder for different build types (Debug, Release)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin/Debug)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin/Release)


# Include the FetchContent module
include(FetchContent)

# Set the project name and version
project(FlappyBirdGame VERSION 1.0.0 LANGUAGES C CXX)

# Set C++ standard to C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Define the game executable target name
set(FLAPPY_BIRD_GAME_TARGET_NAME game)

# Set the directory for executable files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Set the resources directory
set(RESOURCE_FOLDER_NAME "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Resources")
set(RESOURCE_SRC_DIR "${CMAKE_SOURCE_DIR}/Resources")

# Add the game directory source files
add_executable(${FLAPPY_BIRD_GAME_TARGET_NAME}
    ${CMAKE_SOURCE_DIR}/game/src/AssetManager.cpp
    ${CMAKE_SOURCE_DIR}/game/src/bird.cpp
    ${CMAKE_SOURCE_DIR}/game/src/collision.cpp
    ${CMAKE_SOURCE_DIR}/game/src/Game.cpp
    ${CMAKE_SOURCE_DIR}/game/src/inputManager.cpp
    ${CMAKE_SOURCE_DIR}/game/src/land.cpp
    ${CMAKE_SOURCE_DIR}/game/src/main.cpp
    ${CMAKE_SOURCE_DIR}/game/src/pipe.cpp
    ${CMAKE_SOURCE_DIR}/game/src/StateMachine.cpp
    ${CMAKE_SOURCE_DIR}/game/src/GameState.cpp
    ${CMAKE_SOURCE_DIR}/game/src/State.cpp
    ${CMAKE_SOURCE_DIR}/game/src/SplashState.cpp
    ${CMAKE_SOURCE_DIR}/game/src/MainMenuState.cpp
    ${CMAKE_SOURCE_DIR}/game/src/Flash.cpp
    ${CMAKE_SOURCE_DIR}/game/src/HUD.cpp
    ${CMAKE_SOURCE_DIR}/game/src/GameOverState.cpp
)

# Debug message for target creation
message(STATUS "Executable target ${FLAPPY_BIRD_GAME_TARGET_NAME} created")

# Include the 'inc' directory for header files
target_include_directories(${FLAPPY_BIRD_GAME_TARGET_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/game/inc)

# Fetch and configure SFML using FetchContent
FetchContent_Declare(
    SFML
    GIT_REPOSITORY https://github.com/SFML/SFML
    GIT_TAG 2.5.1
    GIT_SHALLOW FALSE
)

FetchContent_MakeAvailable(SFML)
message(STATUS "SFML setup complete")

# Fetch and configure Box2D using FetchContent
FetchContent_Declare(
    Box2D
    GIT_REPOSITORY https://github.com/erincatto/box2d
    GIT_TAG v2.4.1
    GIT_SHALLOW FALSE
)

FetchContent_MakeAvailable(Box2D)
message(STATUS "Box2D setup complete")


# Set up libraries for linking, based on the build type
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(SFML_LIBS sfml-graphics-d sfml-window-d sfml-system-d sfml-audio-d sfml-network-d)
    message(STATUS "Debug build: Linking SFML debug libraries")
else()
    set(SFML_LIBS sfml-graphics sfml-window sfml-system sfml-audio sfml-network)
    message(STATUS "Release build: Linking SFML release libraries")
endif()

# Link SFML, Box2D, and Vorbis to the game executable
target_link_libraries(${FLAPPY_BIRD_GAME_TARGET_NAME} PUBLIC
    ${SFML_LIBS}
    box2d
)

# Add sfml-main for Windows (if applicable)
if(WIN32)
    target_link_libraries(${FLAPPY_BIRD_GAME_TARGET_NAME} PRIVATE sfml-main)
    message(STATUS "Added sfml-main for Windows")
endif()

# Message for final setup and build
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE bin location: ${CMAKE_BINARY_DIR}")

# Copy resources after build
set(RESOURCES_DEST_DIR "${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE}/Resources")
set(RESOURCES_SOURCE_DIR "${CMAKE_SOURCE_DIR}/Resources")

message(STATUS "Copying Resources folder from ${RESOURCES_SOURCE_DIR} to ${RESOURCES_DEST_DIR}")

add_custom_command(TARGET ${FLAPPY_BIRD_GAME_TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${RESOURCES_SOURCE_DIR}
        ${RESOURCES_DEST_DIR}
)

# Check if OpenAL32.dll exists and copy it to the output folder
set(OPENAL32 "${CMAKE_SOURCE_DIR}/game/copyDLL/64bit/openal32.dll")
if(NOT EXISTS ${OPENAL32})
    message(FATAL_ERROR "Error: OpenAL32 DLL not found at ${OPENAL32}")
endif()

message(STATUS "OpenAL32 Location: ${OPENAL32}")

add_custom_command(TARGET ${FLAPPY_BIRD_GAME_TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${OPENAL32}
        ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/openal32.dll
    COMMENT "Copying OpenAL32.dll to ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"
)

message(STATUS "SFML source directory: ${SFML_SOURCE_DIR}")
message(STATUS "Box2D source directory: ${BOX2D_SOURCE_DIR}")
